---
title: "Creating a Music Database with User-Friendly Interface via Shiny"
author: Charlie Bonk and Molly Creagar
format: pdf
---

## Abstract:

This report outlines the data and methods used to create a music database based on one person's listening history. The database was built using R Shiny. In this document, we discuss the data sets that are used, the methods and packages utilized, and the analyses conducted. We also describe the benefits of using Shiny apps for this type of project, and we discuss some possible changes or improvements to the app. The database is housed at <https://mollyc.shinyapps.io/project-math-day-2020/>.

### Keywords:

music database, Shiny app, R

## Introduction

This report outlines the data and methods used to create a music database based on one person's listening history. We called the music database SAAM (Songs, Artists, Albums, and Miscellaneous). SAAM is a data visualization R Shiny app. The main purpose of SAAM is to allow a user to easily search through years of collected listening data of one user and take their own deeper delve into the data. Prior to our work on this project, all of the data that had been collected was stored in multiple Google Sheets, which would occasionally crash if the owner of the data tried to do any operation of some magnitude, such as sorting by a particular column.


The interactivity of the app is paramount; we wanted the user to feel as though any curiosity they had about a song, artist, or album could be answered by themselves through the app, giving the user a greater sense of self accomplishment. This interactivity was introduced through the use of multiple R packages and a user-friendly layout and interface. Shiny apps are useful for this type of project because they allow data to be formatted in a very visual format, as well as allowing for dynamic and integrated sorting and filtering. We continue this document by discussing the data sets used for the project, the methods and analyses conducted, and some overall comments about the database. We also discuss a few possible changes that could be made in future iterations of the app.


## Data Description

The data consists of a collection of multiple Google sheets tracking one person's listening history. An observation consists of the previous month's listening statistics for a particular song. Observations are recorded approximately once a month, though there are some missed months and not every observation is made on the last day of the month. The data dates back to August 2013, so there is almost a full decade of statistics.

There are more than 2100 songs in the data used, with multiple observations for each song. Variables recorded in the Songs dataset include: 

- SongID (a unique identifying number), 
- 24hrMark (the month after the data collection started when the song passed 24 hours of play time), 
- MaxRank (the highest rank the song has ever achieved), 
- dates (the date of the observation), 
- TimeInHours (total time listened in hours), 
- TimeInPlays (total time listened in plays), 
- RankOutOfN (current rank of the song), 
- ValueOutOf1 (scaled rank, with value 1 being best)
- dHours (change in hours listened from the previous observation), 
- dPlays(change in plays from the previous observations), 
- dRank, (change in rank from the previous observation), 
- dValue (change in value from the previous observation), 
- TotaldTime (total change in hours from the first observation of the song), 
- TotaldPlays (total change in plays from the first observation of the song), 
- TotaldRank (total change in rank from the first observation of the song), 
- TotaldValue (total change in value from the first observation of the song), 
- SongName (name of the song), 
- Artist (name of the artist), and 
- Album (name of the album).

Similar variables and metrics are tracked in the Artist and Album datasets. For these, any song that was logged in the Songs data had its artist and album logged in the Artist and Album data. 

The Miscellaneous data includes information and statistics about things that do not cleanly fall under the Song, Artist, and Album umbrellas. The main item found in the Miscellaneous data is information and statistics on a particular playlist: "Bourgeoisie". This playlist is used to track songs that are currently, and somewhat subjectively, considered the best in the music library. The playlist is subject to change every month, so which months each song was on the playlist is recorded. Summary statistics are also recorded, such as the number of months each song is featured on the playlist, the longest streak of months in a row that each song has been on the playlist, and the current streak of months in a row that the song has been on the playlist.

## Methods and Analysis

The main goal of the application is to present the data to a viewer in a clean, easy-to-access manner. The user should ideally be able to think of a song, artist, or album and see firstly if the song is in the data set and secondly see the statistics on that song.
 
For Songs, there are three sub-tabs that the user can use to investigate the data set. These will be for by month data, individual statistcs, and overall statistics.  "Individual" aims to give a deeper look at any specific song and how it has performed during its time being listened to. The code below gives is everything that will be shown to the user.

```{r,eval=F, messages=F}

 song_static_info <- reactive({
    cleaned %>%
      filter(SongName == input$song_name) %>%
      filter(!is.na(TimeInHours)) %>%
      mutate(datenum = as.Date(dates, format = "%B %d %Y")) %>%
      summarise(ArtistName = unique(Artist),
            AlbumName = unique(Album),
            DateAdded = dplyr::first(dates))
  })
  
  cln_subset_overall_info <- reactive({
    
    subBour <- db_misc %>%
      filter(SongName == input$song_name)
    
    
    cleaned %>%
      filter(SongName == input$song_name) %>%
      filter(!is.na(TimeInHours), !is.na(dHours)) %>%
      mutate(datenum = as.Date(dates, format = "%B %d %Y"),
             rowN = first(which(RankOutOfN == MaxRank)),
             DateOfMaxRank = dates[rowN],
             rowD = first(which(dHours == max(dHours))),
             Max_dHours = dHours[rowD],
             DateOfMaxdHours = dates[rowD]) %>%
      summarize(
        MaximumRank = as.integer(first(MaxRank)),
        DateOfMaxRank = first(DateOfMaxRank),
        DateOfMaxdHours = first(DateOfMaxdHours),
        Max_dHours = first(Max_dHours)
      ) %>%
      mutate(MonthsOnBourgeoisie = as.integer(subBour$NumberOfMonths),
             LongestStreakOnBourgeoisie = as.integer(subBour$LongestStreak),
             CurrentStreakOnBourgeoisie = as.integer(subBour$CurrentStreak))
      
  })
 
  
  output$song_info <- renderTable({
    song_static_info() %>%
      select(ArtistName, AlbumName, DateAdded)
  })
  
  output$song_max_info <- renderTable({
    cln_subset_overall_info() %>%
      select(MaximumRank, DateOfMaxRank, Max_dHours, DateOfMaxdHours) 
  })
  
  output$song_big4 <- renderTable({
    cln_subset() %>%
      filter(!is.na(TimeInHours)) %>%
      slice_tail(n = 1) %>%
      select(RankOutOfN, ValueOutOf1, TimeInHours, TimeInPlays)
  })
  
  output$bourgeoisie_song_info <- renderTable({
    cln_subset_overall_info() %>%
      select(MonthsOnBourgeoisie, LongestStreakOnBourgeoisie, CurrentStreakOnBourgeoisie)
  })
  

  
  output$songBig4Plot1 <- renderHighchart({
    
    
    tb <- cleaned %>%
      filter(SongName == input$song_name) %>%
      mutate(datenum = as.Date(dates, format = "%B %d %Y")) %>%
      filter(!is.na(TimeInHours))

    
    p3 <- hchart(
      tb, "line",
      hcaes(x =  datenum, y = RankOutOfN),
      showInLegend = TRUE,
      name = "Rank"
    ) %>% 
      hc_yAxis(reversed = TRUE)%>%
      hc_title(text = "Overall Rank Over Time")
    
    p3
    

  })
  
  output$songBig4Plot2 <- renderHighchart({
    
    tb <- cleaned %>%
      filter(SongName == input$song_name) %>%
      mutate(datenum = as.Date(dates, format = "%B %d %Y")) %>%
      filter(!is.na(TimeInHours))
    
    p4 <- hchart(
      tb, "line",
      hcaes(x =  datenum, y = ValueOutOf1),
      showInLegend = TRUE,
      name = "Value"
    ) %>%
      hc_title(text = "Overall Value Over Time")
    
    p4
  })
  
  output$songBig4Plot3 <- renderHighchart({
    
    tb <- cleaned %>%
      filter(SongName == input$song_name) %>%
      mutate(datenum = as.Date(dates, format = "%B %d %Y")) %>%
      filter(!is.na(TimeInHours))
    
    p1 <-  hchart(
      tb, "line",
      hcaes(x =  datenum, y = TimeInHours),
      showInLegend = TRUE,
      name = "Hours"
    ) %>%
      hc_title(text = "Cumulative Hours Listened Over Time")
    
    p1
  })
  
  output$songBig4Plot4 <- renderHighchart({
    
    tb <- cleaned %>%
      filter(SongName == input$song_name) %>%
      mutate(datenum = as.Date(dates, format = "%B %d %Y")) %>%
      filter(!is.na(TimeInHours))
    
    p2 <-  hchart(
      tb, "line",
      hcaes(x =  datenum, y = TimeInPlays),
      showInLegend = TRUE,
      name = "Hours"
    ) %>%
      hc_title(text = "Cumulative Plays Over Time")
    
    p2
  })
  
  
  
  output$dateTimeListenNC <-
    renderHighchart({
      #non-cumulative listening hours
      tb <- cleaned %>%
        filter(SongName == input$song_name, !is.na(TimeInHours)) %>%
        mutate(datenum = as.Date(dates, format = "%B %d %Y"))
      
      hchart(
        tb, "line",
        hcaes(x =  datenum, y = dHours),
        showInLegend = TRUE,
        name = "Hours"
      ) %>%
        hc_title(text = "Hours Listened by Date")
    })
```

This code will take a song name and return the following:

1. Artist Name
2. Name of the Album
3. Date Added
4. Maximum Rank and Date Maximum Rank was achieved
5. Maximum dHours and Date Maximum dHours was achieved
6. Rank
7. Value
8. Time in Hours Played
9. Number of Plays
10. 5 different plots, covering:
  *   Overall rank of the song over time
  *   Overall value of the song over time
  *   Cumulative hours listened over time
  *   Cumulative plays of the song over time
  *   Hours listened by date added

"Overall" aims to encapsulate data about all songs. The user will be able to sort and filter their data. Each song will be hyperlinked to the individual song data page. Examples of the by month, individual, and overall pages are shown below.

![By Month Example](images/bymo-song-example.png)

![Individual Example](images/indiv-song-example.png)
![Overall Example](images/over-song-example.png)

The second page would automatically generate if the user clicks on "Instant Crush (feat. Julian Casablancas)" in the "By Month" tab or "Overall Song Data" tab.

Artists and Albums tabs follow closely to Songs regarding the content. For the Artist tab, two sub-tabs are shown: "Overall Artist Data" and "Individual Artist Data". These are nearly the same as the corresponding Song tabs, with the "Overall Artist Data" sub-tab having the ability to filter by total hours or plays along with date ranges, and the "Individual Artist Data" taking an artist name and displaying the following:

1. Maximum Rank and Date Maximum Rank was achieved
2. Song Count
3. All songs with the song's album name and maximum rank
4. 5 different plots, covering:
  *   Overall rank of the artist over time
  *   Overall value of the artist over time
  *   Cumulative hours listened over time
  *   Cumulative plays of the artist over time
  *   Hours listened by date added
  
Currently, the album tab only lists "Individual Album Data". There is minimal information shown currently, which the owner of the data had said was expected and reasonable. A user can select an album name and see the following output:


1. Song Count
3. All songs from that album with the artist name and maximum rank of the song
4. 5 different plots, covering:
  *   Overall rank of the album over time
  *   Overall value of the album over time
  *   Cumulative hours listened over time
  *   Cumulative plays of the album over time
  *   Hours listened by date added

The Miscellaneous tab tracks the songs on a playlist named "Bourgeoisie" created by the owner of the listening history data. This playlist is updated each month based on how much the owner is subjectively enjoying songs. So, the amount of time a song stays on the playlist is a metric of how enjoyable the song is to the owner, to some extent.


## Discussion

The SAAM Shiny app presents the data in a simple, condensed, user-friendly manner. Viewing the large amount of data in a visual and interactive way makes the statistics and information accessible to any user interesting in exploring the data. This format also makes it much easier for the owner of the data to view the statistics and history, compared to sorting or filtering using Google Sheets.

The app is also highly reactive and interactive. When the webpage is initially loading, it may take 20 to 30 seconds to fully load; however, after that, any new item clicked or tab opened takes a second or less to load and become interactive. We also implemented interactivity in the graphs through the use of the highcharter R package. By hovering over a particular data point, the value and date the value was logged appears. This is very useful for the owner and anyone else interested in looking at the statistics.

This project was a very valuable experience in terms of learning how to work with a client and use the Shiny app structure and library. We took a lot of input about organization and structure of the app from the owner of the data. Some of the requests about the Shiny app had to be tailored to fit the parameters of what was possible with a Shiny app (to our knowledge, of course). It was also a good experience to have in regards to learning how to take a thought on some component of the data and what should be shown and turn it into an attribute of a Shiny app.

### Future Work

In future iterations of this app, we would like to be able to implement some sort of user input app or information entry system. This could be a standalone thing or part of SAAM. Currently, the data is stored in Google Sheets, which then have to be downloaded to csv files, cleaned, and then read into SAAM. It would be really handy if we were able to expedite this process for the owner, and he was able to enter the data directly into SAAM and have it stored in a csv file in the correct format automatically.

There are also some items on the SAAM wishlist that we did not get to due to time constraints, so it would be valuable to add these items if future work was being done on the app. For example, the owner of the data suggested that it would be nice (but not necessary) to have Bourgeoisie streak information in relation to artist. This streak would look across all songs on the playlist, group by artist, and form a streak count based on which of the artist's songs appeared on the playlist each month.



## Appendix
### Accreditations
We would like to acknowledge the Shiny app "Living in the Lego World''. Significant portions of the user interface were modeled after this app. Full citation: Kaplan, A (2019). _Living in the Lego World_. <https://shiny.rstudio.com/gallery/lego-world.html>

We would also like to thank Sam Macdonald for allowing us to use his music listening history data and providing metrics for what he would want in a music app. His feedback and ideas for organization were very helpful in understanding how our app should look and function.

### R Packages Used:

*   [shiny](https://cran.r-project.org/web/packages/shiny/shiny.pdf)
*   [shinythemes](https://cran.r-project.org/web/packages/shinythemes/shinythemes.pdf)
*   [tidyverse](https://cran.r-project.org/web/packages/tidyverse/tidyverse.pdf)
*   [patchwork](https://cran.r-project.org/web/packages/patchwork/patchwork.pdf)
*   [rsconnect](https://cran.r-project.org/web/packages/rsconnect/rsconnect.pdf)
*   [DT](https://cran.r-project.org/web/packages/DT/DT.pdf)
*   [highcharter](https://cran.r-project.org/web/packages/highcharter/highcharter.pdf)
