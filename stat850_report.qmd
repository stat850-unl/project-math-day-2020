---
title: "Creating a Music Database with User-Friendly Interface via Shiny"
author: Charlie Bonk and Molly Creagar
format: html
---

## Abstract:

This report outlines the data and methods used to create a music database based on one person's listening history. We discuss the data sets that are used, the methods and packages utilized, and the analyses conducted. The database is housed at <https://mollyc.shinyapps.io/project-math-day-2020/>.

### Keywords:

music database, shiny app, R

## Introduction




## Data Description

The data consists of a collection of multiple Google sheets tracking one person's listening history. There are more than 2100 songs in the data used, with multiple observations for each song. An observation consists of the previous month's listening statistics for a particular song. Observations are recorded approximately once a month, though there are some missed months and not every observation is made on the last day of the month.

Variables recorded in the Songs dataset include: 

- SongID (a unique identifying number), 
- 24hrMark (the month after the data collection started when the song passed 24 hours of play time), 
- MaxRank (the highest rank the song has ever achieved), 
- dates (the date of the observation), 
- TimeInHours (total time listened in hours), 
- TimeInPlays (total time listened in plays), 
- RankOutOfN (current rank of the song), 
- ValueOutOf1 (scaled rank, with value 1 being best)
- dHours (change in hours listened from the previous observation), 
- dPlays(change in plays from the previous observations), 
- dRank, (change in rank from the previous observation), 
- dValue (change in value from the previous observation), 
- TotaldTime (total change in hours from the first observation of the song), 
- TotaldPlays (total change in plays from the first observation of the song), 
- TotaldRank (total change in rank from the first observation of the song), 
- TotaldValue (total change in value from the first observation of the song), 
- SongName (name of the song), 
- Artist (name of the artist), and 
- Album (name of the album).

Similar variables and metrics are tracked in the Artist and Album datasets.

## Methods and Analysis

The main goal of the application is to present the data to a viewer in a clean, easy-to-access manner. The user should ideally be able to think of a song, artist, or album and see firstly if the song is in the data set and secondly see the statistics on that song.
 
For the Songs and artists, there are two sub-tabs that the user can use to investigate the data set. These will be for overall and individual data for song/artist. "Overall" aims to encapsulate data about all songs. The user will be able to sort and filter their data. Each song will be hyperlinked to the individual song data page. "Individual" aims to give a deeper look at any specific song and how it has performed during its time being listened to. The code below gives is everything that will be shown to the user.

```{r,eval=F, messages=F}
output$song_info <- renderTable({
    cln_subset_overall_info() %>%
      select(MaximumRank, ArtistName, AlbumName)
  })
  
  output$song_big4 <- renderTable({
    cln_subset() %>%
      filter(!is.na(TimeInHours)) %>%
      slice_tail(n = 1) %>%
      select(RankOutOfN, ValueOutOf1, TimeInHours, TimeInPlays)
  })
  

  
  output$dateTimeListen <- renderPlot({
    
    p1 <- cln_subset() %>%
      select(datenum, TimeInHours) %>%
      filter(!is.na(TimeInHours)) %>%
      ggplot(aes(x = datenum, y = TimeInHours)) +
      geom_line() +
      labs(x = "Date", y = "Cumulative Hours Listened", title = "Cumulative Hours Listened Over Time")
    
    
    p2 <- cln_subset() %>%
      select(datenum, TimeInPlays) %>%
      filter(!is.na(TimeInPlays)) %>%
      ggplot(aes(x = datenum, y = TimeInPlays)) +
      geom_line() +
      labs(x = "Date", y = "Cumulative Plays", title = "Cumulative Plays of the Song Over Time")
    
    p3 <-  cln_subset() %>%
      select(datenum, RankOutOfN) %>%
      filter(!is.na(RankOutOfN)) %>%
      ggplot(aes(x = datenum, y = RankOutOfN)) +
      geom_line() +
      labs(x = "Date", y = "Overall Rank", title = "Overall Rank of the Song Over Time")
      
    p4 <-  cln_subset() %>%
      select(datenum, ValueOutOf1) %>%
      filter(!is.na(ValueOutOf1)) %>%
      ggplot(aes(x = datenum, y = ValueOutOf1)) +
      geom_line() +
      labs(x = "Date", y = "Song Value", title = "Overall Value of the Song Over Time")
    
    
    p3 + p4 + p1 + p2
  })
  

  
  output$dateTimeListenNC <-
    renderPlot({
      #non-cumulative listening hours
      cln_subset() %>%
        select(datenum, dHours) %>%
        filter(!is.na(dHours)) %>%
        ggplot(aes(x = datenum, y = dHours)) +
        geom_line() +
        labs(x = "Date", y = "Hours Listened By Date", title = "Hours Listened by Date Added")
    })
```

This code will take a song name and return the following:

1. Maximum Rank
2. Artist Name
3. Name of the Album
4. Date Added
5. Time in Hours Played
6. Number of Plays
7. 5 different plots, covering:
  *   Overall rank of the song over time
  *   Overall value of the song over time
  *   Cumulative hours listened over time
  *   Cumulative plats of the song over time
  *   Hours listened by date added

Examples of the overall and individual are shown below.
![Overall Example](images/over-song-example.png)
![Individual Example](images/indiv-song-example.png)

The second page would automatically generate if the user clicks on "Instant Crush (feat. Julian Casablancas)" in the "Overall Song Data" tab.

Artists and Albums tabs will follow closely to Songs regarding the content.

The Miscellaneous tab tracks the songs on a playlist named "Bourgeoisie" created by the owner of the listening history data. This playlist is updated each month based on how much the owner is subjectively enjoying songs. So, the amount of time a song stays on the playlist is a metric of how enjoyable the song is to the owner, to some extent.


## Discussion


## Appendix
### Accreditations
We would like to acknowledge the Shiny app ``Living in the Lego World''. Significant portions of the user interface were modelled after this app. Full citation: Kaplan, A (2019). _Living in the Lego World_. <https://shiny.rstudio.com/gallery/lego-world.html>

### R Packages Used:

*   shiny
*   shinythemes
*   tidyverse 
*   patchwork
*   rsconnect
*   DT

